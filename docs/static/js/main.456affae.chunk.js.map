{"version":3,"sources":["pages/header.js","leetcode_js/myAtoi_leetcode08.js","leetcode_js/flatten.js","leetcode_js/longestPalindrome.js","leetcode_js/reverseLinkedList.js","pages/list.js","App.js","serviceWorker.js","index.js"],"names":["Header","res","str","s","trim","exec","num","parseInt","myAtoi","console","log","flatten","array","reduce","acc","val","concat","Array","isArray","findLongestAround","left","right","length","charAt","out","i","len1","len2","len","Math","max","substr","floor","longestPalindrome","reverseList","head","newHead","temp","next","reverse","pre","cur","ListNode","this","h1","old","JSON","stringify","newH","urlPrefix","Link","props","name","className","onClick","window","open","source","func","TaskList","useState","result","setResult","atoi","reverseLinkedList","App","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RAWeA,MAVf,WACI,OACI,6BACI,oEACA,4FACA,+B,OCgBG,G,MAAA,WACX,IAAMC,EAhBG,SAASC,GAClB,IAAIC,EAAID,EAAIE,OAGRH,EADM,YACII,KAAKF,GACnB,GAAGF,EAAK,CACJ,IAAIK,EAAMC,SAASN,EAAI,IACvB,OAAGK,EATD,sBAUMA,GATN,uBAUUA,EAEZ,OAAO,EAKCE,CAAO,kBAEnB,OADAC,QAAQC,IAAIT,GACLA,ICPI,aACX,IAAMA,EAPM,SAAVU,EAAoBC,GACtB,OAAOA,EAAMC,QACT,SAACC,EAAKC,GAAN,OAAcD,EAAIE,OAAOC,MAAMC,QAAQH,GAAOJ,EAAQI,GAAOA,KAC7D,IAIQJ,CAAQ,CAAC,EAAG,EAAG,EAAG,CAAC,EAAG,EAAG,EAAG,CAAC,EAAG,MAE5C,OADAF,QAAQC,IAAIT,GACLA,G,KCiBX,SAASkB,EAAkBjB,EAAKkB,EAAMC,GAElC,KAAOD,GAAQ,GAAKC,EAAQnB,EAAIoB,QAAUpB,EAAIqB,OAAOH,KAAUlB,EAAIqB,OAAOF,IACtED,IACAC,IAEJ,OAAOA,EAAQD,EAAO,EAG1B,IAkBe,aACX,IACII,EA7DgB,SAAUrB,GAI9B,IAFA,IAAIF,EAAM,GAEDwB,EAAI,EAAGA,EAAItB,EAAEmB,OAAQG,IAAK,CAC/B,IAAIC,EAAOP,EAAkBhB,EAAGsB,EAAGA,GAC/BE,EAAOR,EAAkBhB,EAAGsB,EAAGA,EAAI,GACnCG,EAAMC,KAAKC,IAAIJ,EAAMC,GACtBC,EAAM3B,EAAIqB,SACTrB,EAAME,EAAE4B,OAAON,EAAII,KAAKG,OAAOJ,EAAM,GAAK,GAAIA,IAItD,OAAO3B,EAgDGgC,CADE,wBAMZ,OAHAxB,QAAQC,IAAIc,GAGLA,GC5DPU,EAAc,SAAUC,GAGxB,IAFA,IAAIC,EAAU,KACVC,EAAOF,EACJE,GACHA,EAAOF,EAAKG,KACZH,EAAKG,KAAOF,EACZA,EAAUD,EACVA,EAAOE,EAGX,OAAOD,GAUPF,EAAc,SAAUC,GACxB,GAAY,MAARA,GAA6B,MAAbA,EAAKG,KACrB,OAAOH,EAEX,IAAIlC,EAAMiC,EAAYC,EAAKG,MAI3B,OAHAH,EAAKG,KAAKA,KAAOH,EACjBA,EAAKG,KAAO,KAELrC,GAGPiC,EAAc,SAACC,GASf,OAPc,SAAVI,EAAWC,EAAKC,GAChB,IAAKA,EAAK,OAAOD,EAEjB,IAAIF,EAAOG,EAAIH,KAEf,OADAG,EAAIH,KAAOE,EACJD,EAAQE,EAAKH,GAEjBC,CAAQ,KAAMJ,IAGzB,SAASO,EAAS3B,GACd4B,KAAK5B,IAAMA,EACX4B,KAAKL,KAAO,KAGhB,IAAIM,EAAK,IAAIF,EAAS,GACtBE,EAAGN,KAAO,IAAII,EAAS,GACvBE,EAAGN,KAAKA,KAAO,IAAII,EAAS,GAC5BE,EAAGN,KAAKA,KAAKA,KAAO,IAAII,EAAS,GAElB,iBACX,IAAIG,EAAMC,KAAKC,UAAUH,GACrBI,EAAOd,EAAYU,GAIvB,OAHAnC,QAAQC,IAAI,MAAOmC,GACnBpC,QAAQC,IAAI,MAAOsC,GAEZF,KAAKC,UAAUC,IChEpBC,EAAY,6DAuClB,SAASC,EAAKC,GACV,OAAO,4BACH,8BAAOA,EAAMC,MACb,0BAAMC,UAAU,OAAOC,QAAS,WAC5BC,OAAOC,KAAKP,EAAYE,EAAMM,UADlC,gBAGA,0BAAMJ,UAAU,OAAOC,QAASH,EAAMO,MAAtC,iBAIOC,MAhDf,WAAqB,IAAD,EACYC,qBADZ,mBACTC,EADS,KACDC,EADC,KAGhB,OAAO,oCAAE,4BACL,kBAACZ,EAAD,CAAMQ,KAAM,WACRI,EAAU7B,MAEVmB,KAAK,0CACLK,OAAO,qCAEX,kBAACP,EAAD,CACIQ,KAAM,WACFI,EAAUC,MAEdX,KAAK,uDACLK,OAAO,qCAEX,kBAACP,EAAD,CACIQ,KAAM,WACFI,EAAUnD,MAEd8C,OAAO,yBACPL,KAAK,qBAET,kBAACF,EAAD,CACIQ,KAAM,WACFI,EAAUE,MAEdZ,KAAK,2BACLK,OAAO,sCAGX,yBAAKJ,UAAU,UACVQ,KC5BEI,E,iLAPP,OAAQ,yBAAKZ,UAAU,aACnB,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAJMa,IAAMC,WCQJC,QACW,cAA7Bb,OAAOc,SAASC,UAEe,UAA7Bf,OAAOc,SAASC,UAEhBf,OAAOc,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.456affae.chunk.js","sourcesContent":["import React from 'react';\nfunction Header() {\n    return (\n        <div>\n            <h2>算法学习记录</h2>\n            <p>点击查看执行结果，console</p>\n            <hr></hr>\n        </div>\n    );\n}\n\nexport default Header;","/**\n * 8. 字符串转换整数 (atoi)\n * @param {string} str\n * @return {number}\n */\nlet max = 2147483648 - 1;\nlet min = -2147483648;\nvar myAtoi = function(str) {\n    let s = str.trim();\n\n    let reg = /^[+-]?\\d+/;\n    let res = reg.exec(s);\n    if(res) {\n        let num = parseInt(res[0]);\n        if(num > max) return max;\n        else if(num < min) return min;\n        else return num;\n    } else {\n        return 0;\n    }\n};\n\nexport default () => {\n    const res = myAtoi('-91283472332-=')\n    console.log(res);\n    return res;\n}\n\n","// const flatten = function (array) {\n//     let result = [];\n//     for(let e of array) {\n//         if(Array.isArray(e)) {\n//             result.push(...flatten(e))\n//         } else {\n//             result.push(e)\n//         }\n//     }\n//     return result;\n// }\n\nconst flatten = function (array) {\n    return array.reduce(\n        (acc, val) => acc.concat(Array.isArray(val) ? flatten(val) : val),\n        [])\n}\n\nexport default () => {\n    const res = flatten([1, 2, 3, [4, 5, 6, [7, 8]]])\n    console.log(res);\n    return res;\n}\n\n","/**\n * 5. 最长回文子串\n * 给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。\n * @param {string} s\n * @return {string}\n */\nvar longestPalindrome = function (s) {\n\n    let res = '';\n\n    for (let i = 0; i < s.length; i++) {\n        let len1 = findLongestAround(s, i, i); //奇数\n        let len2 = findLongestAround(s, i, i + 1) //偶数\n        let len = Math.max(len1, len2);\n        if(len > res.length) {\n            res = s.substr(i - Math.floor((len - 1) / 2), len);\n        }\n    }\n\n    return res;\n};\n\nfunction testPalindrome(str) {\n    let reverse = [...str].reverse().join('');\n    return reverse == str;\n}\n\nfunction testPal(str, i, j) {\n    while(i < j) {\n        if(str.charAt(i) !== str.charAt(j)){\n            return false\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\n\nfunction findLongestAround(str, left, right) {\n\n    while (left >= 0 && right < str.length && str.charAt(left) === str.charAt(right)) {\n        left--;\n        right++;\n    }\n    return right - left - 1\n}\n\nconst longestPalindromeViolence = function (str) {\n    const len = str.length;\n    if(len < 2) {\n        return str;\n    }\n\n    let res = str.substr(0, 1);\n    for (let i = 0; i < len; i++) {\n        for(let j = i; j < len; j++) {\n            if(j - i + 1 > res.length && testPal(str, i, j)) {\n                res = str.substr(i, j - i + 1);\n            }\n        }\n    }\n\n    return res;\n}\n\nexport default () => {\n    let input = 'abcabcabcabccedabbac'\n    let out = longestPalindrome(input)\n    //输出 console\n    console.log(out);\n\n    //输出 obj 展示\n    return out;\n}","/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * 迭代的方法\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar reverseList = function (head) {\n    let newHead = null;\n    let temp = head;\n    while (temp) {\n        temp = head.next;\n        head.next = newHead;\n        newHead = head;\n        head = temp;\n    }\n\n    return newHead;\n};\n\n\n/**\n * 递归的方法\n * 反向递归\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar reverseList = function (head) {\n    if (head == null || head.next == null)\n        return head;\n\n    let res = reverseList(head.next);\n    head.next.next = head;\n    head.next = null;\n\n    return res;\n};\n\nvar reverseList = (head) => {\n    // debugger\n    let reverse = (pre, cur) => {\n        if (!cur) return pre;\n        // 保存 next 节点\n        let next = cur.next;\n        cur.next = pre;\n        return reverse(cur, next);\n    }\n    return reverse(null, head);\n}\n\nfunction ListNode(val) {\n    this.val = val;\n    this.next = null;\n}\n\nlet h1 = new ListNode(1);\nh1.next = new ListNode(2);\nh1.next.next = new ListNode(3);\nh1.next.next.next = new ListNode(4);\n\nexport default () => {\n    let old = JSON.stringify(h1);\n    let newH = reverseList(h1);\n    console.log('old', old);\n    console.log('new', newH);\n\n    return JSON.stringify(newH)\n}\n","import React, { useState } from 'react';\nimport './style.sass';\nimport atoi from '../leetcode_js/myAtoi_leetcode08';\nimport flatten from '../leetcode_js/flatten';\nimport longestPalindrome from '../leetcode_js/longestPalindrome';\nimport reverseLinkedList from '../leetcode_js/reverseLinkedList';\n\nconst urlPrefix = 'https://github.com/andycao/algorithmLearn/blob/master/src/'\nfunction TaskList() {\n    const [result, setResult] = useState();\n\n    return <><ul>\n        <Link func={() => {\n            setResult(longestPalindrome())\n        }}\n            name='5. 最长回文子串'\n            source='leetcode_js/longestPalindrome.js'\n        ></Link>\n        <Link\n            func={() => {\n                setResult(atoi())\n            }}\n            name='8. 字符串转换整数 (atoi)'\n            source=\"leetcode_js/myAtoi_leetcode08.js\"\n        ></Link>\n        <Link\n            func={() => {\n                setResult(flatten())\n            }}\n            source=\"leetcode_js/flatten.js\"\n            name='手写flat'\n        ></Link>\n        <Link\n            func={() => {\n                setResult(reverseLinkedList())\n            }}\n            name='反转链表'\n            source=\"leetcode_js/reverseLinkedList.js\"\n        ></Link>\n    </ul>\n        <div className=\"result\">\n            {result}\n        </div>\n    </>;\n}\n\nfunction Link(props) {\n    return <li>\n        <span>{props.name}</span>\n        <span className=\"link\" onClick={() => {\n            window.open(urlPrefix + props.source)\n        }}>源码</span>\n        <span className=\"link\" onClick={props.func}>运行</span>\n    </li>;\n}\n\nexport default TaskList;","import React from 'react';\nimport Header from './pages/header';\nimport TaskList from './pages/list';\n\nclass App extends React.Component {\n    render(){\n        return (<div className='container'>\n            <Header />\n            <TaskList />\n        </div>);\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}